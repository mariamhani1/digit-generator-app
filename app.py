# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1S-swD-i8ijcdegl7uw3IGZMRt4q4beNe
"""


import streamlit as st
import torch
import torch.nn as nn
import matplotlib.pyplot as plt

LATENT_DIM = 100
LABEL_DIM = 10
IMG_DIM = 28 * 28

class Generator(nn.Module):
    def __init__(self):
        super().__init__()
        self.label_emb = nn.Embedding(10, LABEL_DIM)
        self.model = nn.Sequential(
            nn.Linear(LATENT_DIM + LABEL_DIM, 256),
            nn.ReLU(),
            nn.Linear(256, 512),
            nn.ReLU(),
            nn.Linear(512, IMG_DIM),
            nn.Tanh()
        )

    def forward(self, noise, labels):
        label_embedding = self.label_emb(labels)
        x = torch.cat((noise, label_embedding), dim=1)
        return self.model(x)

@st.cache_resource
def load_model():
    model = Generator()
    model.load_state_dict(torch.load("models/generator.pth", map_location="cpu"))
    model.eval()
    return model

model = load_model()

st.title("ðŸ§  Handwritten Digit Generator")

digit = st.selectbox("Select a digit (0â€“9):", list(range(10)))
generate = st.button("Generate Images")

if generate:
    noise = torch.randn(5, LATENT_DIM)
    labels = torch.tensor([digit] * 5)

    with torch.no_grad():
        images = model(noise, labels).view(-1, 28, 28)

    fig, axs = plt.subplots(1, 5, figsize=(10, 2))
    for i, ax in enumerate(axs):
        ax.imshow(images[i], cmap="gray")
        ax.axis("off")
    st.pyplot(fig)